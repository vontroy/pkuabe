user_agent_parsers:
  #### SPECIAL CASES TOP ####

  # WeChat
  - regex: '(MicroMessenger/)(\d+).(\d+).(\d+)'
    family_replacement: 'WeChat'

  # Weibo
  - regex: 'Weibo'
    family_replacement: 'Weibo'

  # QQ Browsers
  - regex: '(MQQBrowser/Mini)(?:(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?'
    #family_replacement: 'QQ Browser Mini'
    family_replacement: 'QQ Browser'
  - regex: '(MQQBrowser)(?:/(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?'
    #family_replacement: 'QQ Browser Mobile'
    family_replacement: 'QQ Browser'
  - regex: '(QQBrowser)(?:/(\d+)(?:\.(\d+)\.(\d+)(?:\.(\d+))?)?)?'
    family_replacement: 'QQ Browser'

  # QQ inner
  - regex: '(QQ)/(\d+)\.(\d+)\.(\d+)'
    family_replacement: 'QQInner'

  # Firefox
  - regex: '(Pale[Mm]oon)/(\d+)\.(\d+)\.?(\d+)?'
    family_replacement: 'Firefox'
  - regex: '(Fennec)/(\d+)\.(\d+)\.?([ab]?\d+[a-z]*)'
    family_replacement: 'Firefox'
  - regex: '(Fennec)/(\d+)\.(\d+)(pre)'
    family_replacement: 'Firefox'
  - regex: '(Fennec)/(\d+)\.(\d+)'
    family_replacement: 'Firefox'
  - regex: 'Mobile.*(Firefox)/(\d+)\.(\d+)'
    family_replacement: 'Firefox'
  - regex: '(Namoroka|Shiretoko|Minefield)/(\d+)\.(\d+)\.(\d+(?:pre)?)'
    family_replacement: 'Firefox'
  - regex: '(Firefox)/(\d+)\.(\d+)(a\d+[a-z]*)'
    family_replacement: 'Firefox'
  - regex: '(Firefox)/(\d+)\.(\d+)(b\d+[a-z]*)'
    family_replacement: 'Firefox'
  - regex: '(Firefox)-(?:\d+\.\d+)?/(\d+)\.(\d+)(a\d+[a-z]*)'
    family_replacement: 'Firefox'
  - regex: '(Firefox)-(?:\d+\.\d+)?/(\d+)\.(\d+)(b\d+[a-z]*)'
    family_replacement: 'Firefox'
  - regex: '(Namoroka|Shiretoko|Minefield)/(\d+)\.(\d+)([ab]\d+[a-z]*)?'
    family_replacement: 'Firefox'
  - regex: '(Firefox).*Tablet browser (\d+)\.(\d+)\.(\d+)'
    family_replacement: 'Firefox'
  - regex: '(Firefox)/(\d+)\.(\d+)\.(\d+)'
  - regex: '(Firefox)/(\d+)\.(\d+)(pre|[ab]\d+[a-z]*)?'

  # Chrome
  - regex: '(Chrome)/(\d+)\.(\d+)\.(\d+)\.(\d+) Mobile'
    family_replacement: 'Chrome'
  - regex: '(chromeframe)/(\d+)\.(\d+)\.(\d+)'
    family_replacement: 'Chrome'

  #Mozilla/5.0 (Linux; U; Android 4.3; zh-cn; K-Touch Tou ch3 Build/JLS36C) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30 TXMicroBlog612
  - regex: 'TXMicroBlog'
    family_replacement: 'TencentWeibo'

  #XiaoMi MiuiBrowser
  - regex: 'XiaoMi'
    family_replacement: 'MIUI Browser'

  - regex: 'MiuiBrowser'
    family_replacement: 'MIUI Browser'

  - regex: '(MiuiBrowser)/(\d+)\.(\d+)\.(\d+)'
    family_replacement: 'MIUI Browser'

  - regex: 'XiaoMi/MiuiBrowser'
    family_replacement: 'MIUI Browser'

  - regex: '(XiaoMi/MiuiBrowser)/(\d+)\.(\d+)\.(\d+)'
    family_replacement: 'MIUI Browser'

  # UC Browser
  - regex: '(UCBrowser)[ /](\d+)\.(\d+)\.(\d+)'
    family_replacement: 'UC Browser'

  - regex: '(UC Browser)[ /](\d+)\.(\d+)\.(\d+)'
    family_replacement: 'UC Browser'

  - regex: '(UCBrowser/)(\d+).(\d+).(\d+)'
    family_replacement: 'UC Browser'

  - regex: '(UC Browser|UCBrowser|UCWEB)(\d+)\.(\d+)\.(\d+)'
    family_replacement: 'UC Browser'

os_parsers:

  ##########
  # Android
  # can actually detect rooted android os. do we care?
  ##########
  - regex: '(Android)[ \-/](\d+)\.(\d+)(?:[.\-]([a-z0-9]+))?'
  - regex: '(Android) Donut'
  - regex: '(Android) Eclair'
  - regex: '(Android) Froyo'
  - regex: '(Android) Gingerbread'
  - regex: '(Android) Honeycomb'

  # UCWEB
  - regex: '^UCWEB.*; (Adr) (\d+)\.(\d+)(?:[.\-]([a-z0-9]+))?;'
    os_replacement: 'Android'
  - regex: '^UCWEB.*; (iPad OS|iPh OS) (\d+)_(\d+)(?:_(\d+))?;'
    os_replacement: 'iOS'
  - regex: '^UCWEB.*; (wds) (\d+)\.(\d+)(?:\.(\d+))?;'
  # JUC
  - regex: '^(JUC).*; ?U; ?(?:Android)?(\d+)\.(\d+)(?:[\.\-]([a-z0-9]+))?'
    os_replacement: 'Android'

  ##########
  # Kindle Android
  ##########
  - regex: '(Silk-Accelerated=[a-z]{4,5})'
    os_replacement: 'Android'

  ##########
  # Mac OS
  # @ref: http://en.wikipedia.org/wiki/Mac_OS_X#Versions
  # @ref: http://www.puredarwin.org/curious/versions
  ##########
  - regex: '(Mac OS X) (\d+)[_.](\d+)(?:[_.](\d+))?'
  # Leopard
  - regex: ' (Dar)(win)/(9).(\d+).*\((?:i386|x86_64|Power Macintosh)\)'
    os_replacement: 'Mac OS X'
    os_v1_replacement: '10'
    os_v2_replacement: '5'
  # Snow Leopard
  - regex: ' (Dar)(win)/(10).(\d+).*\((?:i386|x86_64)\)'
    os_replacement: 'Mac OS X'
    os_v1_replacement: '10'
    os_v2_replacement: '6'
  # Lion
  - regex: ' (Dar)(win)/(11).(\d+).*\((?:i386|x86_64)\)'
    os_replacement: 'Mac OS X'
    os_v1_replacement: '10'
    os_v2_replacement: '7'
  # Mountain Lion
  - regex: ' (Dar)(win)/(12).(\d+).*\((?:i386|x86_64)\)'
    os_replacement: 'Mac OS X'
    os_v1_replacement: '10'
    os_v2_replacement: '8'
  # Mavericks
  - regex: ' (Dar)(win)/(13).(\d+).*\((?:i386|x86_64)\)'
    os_replacement: 'Mac OS X'
    os_v1_replacement: '10'
    os_v2_replacement: '9'

  # IE on Mac doesn't specify version number
  - regex: 'Mac_PowerPC'
    os_replacement: 'Mac OS X'

  # builds before tiger don't seem to specify version?

  # ios devices spoof (mac os x), so including intel/ppc prefixes
  - regex: '(?:PPC|Intel) (Mac OS X)'

  ##########
  # iOS
  # http://en.wikipedia.org/wiki/IOS_version_history
  ##########
  - regex: '(CPU OS|iPhone OS|CPU iPhone) +(\d+)[_\.](\d+)(?:[_\.](\d+))?'
    os_replacement: 'iOS'

  # remaining cases are mostly only opera uas, so catch opera as to not catch iphone spoofs
  - regex: '(iPhone|iPad|iPod); Opera'
    os_replacement: 'iOS'

  # few more stragglers
  - regex: '(iPhone|iPad|iPod).*Mac OS X.*Version/(\d+)\.(\d+)'
    os_replacement: 'iOS'

  - regex: '(AppleTV)/(\d+)\.(\d+)'
    os_replacement: 'iOS'

  # CFNetwork/Darwin - The specific CFNetwork or Darwin version determines
  # whether the os maps to Mac OS, or iOS, or just Darwin.
  # See: http://user-agents.me/cfnetwork-version-list
  - regex: '(CFNetwork)/(5)48\.0\.3.* Darwin/11\.0\.0'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/(5)48\.(0)\.4.* Darwin/(1)1\.0\.0'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/(5)48\.(1)\.4'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/(4)85\.1(3)\.9'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/(6)09\.(1)\.4'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/(6)(0)9'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/6(7)2\.(1)\.13'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/6(7)2\.(1)\.(1)4'
    os_replacement: 'iOS'
  - regex: '(CF)(Network)/6(7)(2)\.1\.15'
    os_replacement: 'iOS'
    os_v1_replacement: '7'
    os_v2_replacement: '1'
  - regex: '(CFNetwork)/6(7)2\.(0)\.(?:2|8)'
    os_replacement: 'iOS'
  - regex: '(CFNetwork)/709\.1'
    os_replacement: 'iOS'
    os_v1_replacement: '8'
    os_v2_replacement: '0.b5'

  ##########
  # CFNetwork iOS Apps
  # @ref: https://en.wikipedia.org/wiki/Darwin_(operating_system)#Release_history
  ##########
  - regex: 'CFNetwork/.* Darwin/(9)\.\d+'
    os_replacement: 'iOS'
    os_v1_replacement: '1'
  - regex: 'CFNetwork/.* Darwin/(10)\.\d+'
    os_replacement: 'iOS'
    os_v1_replacement: '4'
  - regex: 'CFNetwork/.* Darwin/(11)\.\d+'
    os_replacement: 'iOS'
    os_v1_replacement: '5'
  - regex: 'CFNetwork/.* Darwin/(13)\.\d+'
    os_replacement: 'iOS'
    os_v1_replacement: '6'
  - regex: 'CFNetwork/6.* Darwin/(14)\.\d+'
    os_replacement: 'iOS'
    os_v1_replacement: '7'
  - regex: 'CFNetwork/7.* Darwin/(14)\.\d+'
    os_replacement: 'iOS'
    os_v1_replacement: '8'
    os_v2_replacement: '0'
  # iOS Apps
  - regex: '\b(iOS[ /]|iPhone(?:/| v|[ _]OS[/,]|; | OS : |\d,\d/|\d,\d; )|iPad/)(\d{1,2})[_\.](\d{1,2})(?:[_\.](\d+))?'
    os_replacement: 'iOS'

device_parsers:
  ##########
  # incomplete!
  # multiple replacement placeholds i.e. ($1) ($2) help solve problem of single device with multiple representations in ua
  # e.g. HTC Dream S should parse to the same device as HTC_DreamS
  ##########

  ##########
  # incomplete!
  # HTC
  # http://en.wikipedia.org/wiki/List_of_HTC_phones
  # this is quickly getting unwieldy
  ##########
  # example: Mozilla/5.0 (Linux; U; Android 2.3.2; fr-fr; HTC HD2 Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
  - regex: 'HTC ([A-Z][a-z0-9]+) Build'
    device_replacement: 'HTC $1'
  # example: Mozilla/5.0 (Linux; U; Android 2.1; es-es; HTC Legend 1.23.161.1 Build/ERD79) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari/530.17,gzip
  - regex: 'HTC ([A-Z][a-z0-9 ]+) \d+\.\d+\.\d+\.\d+'
    device_replacement: 'HTC $1'
  # example: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; HTC_Touch_Diamond2_T5353; Windows Phone 6.5.3.5)
  - regex: 'HTC_Touch_([A-Za-z0-9]+)'
    device_replacement: 'HTC Touch ($1)'
  # should come after HTC_Touch
  - regex: 'USCCHTC(\d+)'
    device_replacement: 'HTC $1 (US Cellular)'
  - regex: 'Sprint APA(9292)'
    device_replacement: 'HTC $1 (Sprint)'
  - regex: 'HTC ([A-Za-z0-9]+ [A-Z])'
    device_replacement: 'HTC $1'
  - regex: 'HTC[-_/\s]([A-Za-z0-9]+)'
    device_replacement: 'HTC $1'
  - regex: '(ADR[A-Za-z0-9]+)'
    device_replacement: 'HTC $1'
  - regex: '(HTC)'

  # Tesla Model S
  - regex: '(QtCarBrowser)'
    device_replacement: 'Tesla Model S'

  # Samsung
  - regex: '(SamsungSGHi560)'
    device_replacement: 'Samsung SGHi560'

  - regex: '(SCH-[A-Za-z0-9_-]+)'
    device_replacement: 'Samsung $1'

  - regex: '(SGH-[A-Za-z0-9_-]+)'
    device_replacement: 'Samsung $1'

  - regex: '(GT-[A-Za-z0-9_-]+)'
    device_replacement: 'Samsung $1'

  - regex: '(SM-[A-Za-z0-9_-]+)'
    device_replacement: 'Samsung $1'

  - regex: '(SPH-[A-Za-z0-9_-]+)'
    device_replacement: 'Samsung $1'

  - regex: 'SAMSUNG-([A-Za-z0-9_-]+)'
    device_replacement: 'Samsung $1'

  - regex: 'SAMSUNG ([A-Za-z0-9_-]+)'
    device_replacement: 'Samsung $1'


  #########
  # Ericsson - must come before nokia since they also use symbian
  #########
  - regex: 'SonyEricsson([A-Za-z0-9]+)/'
    device_replacement: 'Ericsson $1'

  ##########
  # PlayStation
  # The Vita spoofs the Kindle
  ##########
  - regex: 'PLAYSTATION 3'
    device_replacement: 'PlayStation 3'
  - regex: '(PlayStation (:?Portable|Vita))'
  - regex: '(PlayStation (:?\d+))'

  ##########
  # incomplete!
  # Kindle
  # http://amazonsilk.wordpress.com/useful-bits/silk-user-agent/
  ##########
  - regex: '(KFOT Build)'
    device_replacement: 'Kindle Fire'
  - regex: '(KFTT Build)'
    device_replacement: 'Kindle Fire HD'
  - regex: '(KFJWI Build)'
    device_replacement: 'Kindle Fire HD 8.9" WiFi'
  - regex: '(KFJWA Build)'
    device_replacement: 'Kindle Fire HD 8.9" 4G'
  - regex: '(KFSOWI Build)'
    device_replacement: 'Kindle Fire HD 7" WiFi'
  - regex: '(KFTHWI Build)'
    device_replacement: 'Kindle Fire HDX 7" WiFi'
  - regex: '(KFTHWA Build)'
    device_replacement: 'Kindle Fire HDX 7" 4G'
  - regex: '(KFAPWI Build)'
    device_replacement: 'Kindle Fire HDX 8.9" WiFi'
  - regex: '(KFAPWA Build)'
    device_replacement: 'Kindle Fire HDX 8.9" 4G'
  - regex: '(Kindle Fire)'
  - regex: '(Kindle)'
  - regex: '(Silk)/(\d+)\.(\d+)(?:\.([0-9\-]+))?'
    device_replacement: 'Kindle Fire'



  ##########
  # NOKIA
  # nokia NokiaN8-00 comes before iphone. sometimes spoofs iphone
  ##########
  - regex: 'NokiaN([0-9]+)'
    device_replacement: 'Nokia N$1'
  - regex: 'NOKIA([A-Za-z0-9\v-]+)'
    device_replacement: 'Nokia $1'
  - regex: 'Nokia([A-Za-z0-9\v-]+)'
    device_replacement: 'Nokia $1'
  - regex: 'NOKIA ([A-Za-z0-9\-]+)'
    device_replacement: 'Nokia $1'
  - regex: 'Nokia ([A-Za-z0-9\-]+)'
    device_replacement: 'Nokia $1'
  - regex: 'Lumia ([A-Za-z0-9\-]+)'
    device_replacement: 'Lumia $1'
  - regex: 'Symbian'
    device_replacement: 'Nokia'

  ##########
  # BlackBerry
  # http://www.useragentstring.com/pages/BlackBerry/
  ##########
  - regex: 'BB10; ([A-Za-z0-9\- ]+)\)'
    device_replacement: 'BlackBerry $1'
  - regex: '(PlayBook).+RIM Tablet OS'
    device_replacement: 'BlackBerry Playbook'
  - regex: 'Black[Bb]erry ([0-9]+);'
    device_replacement: 'BlackBerry $1'
  - regex: 'Black[Bb]erry([0-9]+)'
    device_replacement: 'BlackBerry $1'
  - regex: 'Black[Bb]erry;'
    device_replacement: 'BlackBerry'

  ##########
  # PALM / HP
  ##########
  # some palm devices must come before iphone. sometimes spoofs iphone in ua
  - regex: '(Pre)/(\d+)\.(\d+)'
    device_replacement: 'Palm Pre'
  - regex: '(Pixi)/(\d+)\.(\d+)'
    device_replacement: 'Palm Pixi'
  - regex: '(Touch[Pp]ad)/(\d+)\.(\d+)'
    device_replacement: 'HP TouchPad'
  - regex: 'HPiPAQ([A-Za-z0-9]+)/(\d+).(\d+)'
    device_replacement: 'HP iPAQ $1'
  - regex: 'Palm([A-Za-z0-9]+)'
    device_replacement: 'Palm $1'
  - regex: 'Treo([A-Za-z0-9]+)'
    device_replacement: 'Palm Treo $1'
  - regex: 'webOS.*(P160UNA)/(\d+).(\d+)'
    device_replacement: 'HP Veer'

  ##########
  # AppleTV
  # No built in browser that I can tell
  # Stack Overflow indicated iTunes-AppleTV/4.1 as a known UA for app available and I'm seeing it in live traffic
  ##########
  - regex: '(AppleTV)'
    device_replacement: 'AppleTV'

  ##########
  # Catch the google mobile crawler before checking for iPhones.
  ##########

  - regex: 'AdsBot-Google-Mobile'
    device_replacement: 'Spider'

  - regex: 'Googlebot-Mobile/(\d+).(\d+)'
    device_replacement: 'Spider'

  - regex: 'Googlebot/\d+.\d+'
    device_replacement: 'Spider'

  - regex: 'NING/(\d+).(\d+)'
    device_replacement: 'Spider'

  - regex: 'MsnBot-Media /(\d+).(\d+)'
    device_replacement: 'Spider'

  ##########
  # complete but probably catches spoofs
  # iSTUFF
  ##########
  # ipad and ipod must be parsed before iphone
  # cannot determine specific device type from ua string. (3g, 3gs, 4, etc)
  - regex: '(iPad) Simulator;'
  - regex: '(iPad);'
  - regex: '(iPod) touch;'
  - regex: '(iPod);'
  - regex: '(iPhone) Simulator;'
  - regex: '(iPhone);'

  ##########
  # Acer
  ##########
  - regex: 'acer_([A-Za-z0-9]+)_'
    device_replacement: 'Acer $1'
  - regex: 'acer_([A-Za-z0-9]+)_'
    device_replacement: 'Acer $1'

  ##########
  # Alcatel
  ##########
  - regex: 'ALCATEL-([A-Za-z0-9]+)'
    device_replacement: 'Alcatel $1'
  - regex: 'Alcatel-([A-Za-z0-9]+)'
    device_replacement: 'Alcatel $1'
  - regex: 'ALCATEL_ONE_TOUCH_([A-Za-z0-9]+)'
    device_replacement: 'Alcatel ONE TOUCH $1'
  - regex: 'ALCATEL (ONE TOUCH [A-Za-z0-9]+)'
    device_replacement: 'Alcatel $1'
  - regex: 'ALCATEL (one touch [A-Za-z0-9]+)'
    device_replacement: 'Alcatel $1'
  - regex: 'ALCATEL ([A-Za-z0-9]+)'
    device_replacement: 'Alcatel $1'
  ##########
  # Amoi
  ##########
  - regex: 'Amoi\-([A-Za-z0-9]+)'
    device_replacement: 'Amoi $1'
  - regex: 'AMOI\-([A-Za-z0-9]+)'
    device_replacement: 'Amoi $1'

  ##########
  # Amoi
  ##########
  - regex: 'Asus\-([A-Za-z0-9]+)'
    device_replacement: 'Asus $1'
  - regex: 'ASUS\-([A-Za-z0-9]+)'
    device_replacement: 'Asus $1'

  ##########
  # Bird
  ##########
  - regex: 'BIRD\-([A-Za-z0-9]+)'
    device_replacement: 'Bird $1'
  - regex: 'BIRD\.([A-Za-z0-9]+)'
    device_replacement: 'Bird $1'
  - regex: 'BIRD ([A-Za-z0-9]+)'
    device_replacement: 'Bird $1'

  ##########
  # Dell
  ##########
  - regex: 'Dell ([A-Za-z0-9]+)'
    device_replacement: 'Dell $1'

  ##########
  # DoCoMo
  ##########
  - regex: 'DoCoMo/2\.0 ([A-Za-z0-9]+)'
    device_replacement: 'DoCoMo $1'
  - regex: '([A-Za-z0-9]+)_W\;FOMA'
    device_replacement: 'DoCoMo $1'
  - regex: '([A-Za-z0-9]+)\;FOMA'
    device_replacement: 'DoCoMo $1'

  ##########
  # Huawei
  ##########
  - regex: 'Huawei([A-Za-z0-9]+)'
    device_replacement: 'Huawei $1'
  - regex: 'HUAWEI-([A-Za-z0-9]+)'
    device_replacement: 'Huawei $1'
  - regex: 'vodafone([A-Za-z0-9]+)'
    device_replacement: 'Huawei Vodafone $1'

  ##########
  # i-mate
  ##########
  - regex: 'i\-mate ([A-Za-z0-9]+)'
    device_replacement: 'i-mate $1'

  ##########
  # kyocera
  ##########
  - regex: 'Kyocera\-([A-Za-z0-9]+)'
    device_replacement: 'Kyocera $1'
  - regex: 'KWC\-([A-Za-z0-9]+)'
    device_replacement: 'Kyocera $1'

  ##########
  # lenovo
  ##########
  - regex: 'Lenovo\-([A-Za-z0-9]+)'
    device_replacement: 'Lenovo $1'
  - regex: 'Lenovo_([A-Za-z0-9]+)'
    device_replacement: 'Lenovo $1'

  ##########
  # HbbTV (European and Australian standard)
  # written before the LG regexes, as LG is making HbbTV too
  ##########
  - regex: '(HbbTV)/[0-9]+\.[0-9]+\.[0-9]+'

  ##########
  # lg
  ##########
  - regex: 'LG/([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LG-LG([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LGE-LG([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LGE VX([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LG ([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LGE LG\-AX([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LG\-([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LGE\-([A-Za-z0-9]+)'
    device_replacement: 'LG $1'
  - regex: 'LG([A-Za-z0-9]+)'
    device_replacement: 'LG $1'

  ##########
  # kin
  ##########
  - regex: '(KIN)\.One (\d+)\.(\d+)'
    device_replacement: 'Microsoft $1'
  - regex: '(KIN)\.Two (\d+)\.(\d+)'
    device_replacement: 'Microsoft $1'

  ##########
  # motorola
  ##########
  - regex: '(Motorola)\-([A-Za-z0-9]+)'
  - regex: 'MOTO\-([A-Za-z0-9]+)'
    device_replacement: 'Motorola $1'
  - regex: 'MOT\-([A-Za-z0-9]+)'
    device_replacement: 'Motorola $1'
  - regex: ' (DROID RAZR [A-Za-z0-9 ]+) '
    device_replacement: 'Motorola $1'
  - regex: ' (DROID[2 ][A-Za-z0-9 ]+) '
    device_replacement: 'Motorola $1'
  - regex: ' (Droid2| )'
    device_replacement: 'Motorola $1'
  - regex: ' (DROID2| )'
    device_replacement: 'Motorola $1'

  ##########
  # nintendo
  ##########
  - regex: '(Nintendo WiiU)'
    device_replacement: 'Nintendo Wii U'
  - regex: 'Nintendo (DS|3DS|DSi|Wii);'
    device_replacement: 'Nintendo $1'

  ##########
  # pantech
  ##########
  - regex: 'Pantech([A-Za-z0-9]+)'
    device_replacement: 'Pantech $1'

  ##########
  # philips
  ##########
  - regex: 'Philips([A-Za-z0-9]+)'
    device_replacement: 'Philips $1'
  - regex: 'Philips ([A-Za-z0-9]+)'
    device_replacement: 'Philips $1'

  ##########
  # Samsung
  ##########
  - regex: 'SAMSUNG-([A-Za-z0-9\-]+)'
    device_replacement: 'Samsung $1'
  - regex: 'SAMSUNG\; ([A-Za-z0-9\-]+)'
    device_replacement: 'Samsung $1'

  ##########
  # ZTE
  ##########
  - regex: 'ZTE-([A-Za-z0-9\-]+)'
    device_replacement: 'ZTE $1'
  - regex: 'ZTE ([A-Za-z0-9\-]+)'
    device_replacement: 'ZTE $1'
  - regex: 'ZTE_([A-Za-z0-9\-]+)'
    device_replacement: 'ZTE $1'

  ##########
  # Sega
  ##########
  - regex: 'Dreamcast'
    device_replacement: 'Sega Dreamcast'

  ##########
  # Softbank
  ##########
  - regex: 'Softbank/1\.0/([A-Za-z0-9]+)'
    device_replacement: 'Softbank $1'
  - regex: 'Softbank/2\.0/([A-Za-z0-9]+)'
    device_replacement: 'Softbank $1'

  ##########
  # SONY   #
  ##########
  - regex: 'Sony([^ ]+) '
    device_replacement: 'Sony $1'

  ##########
  # WebTV
  ##########
  - regex: '(WebTV)/(\d+).(\d+)'

  #########
  # Android General Device Matching (far from perfect)
  #########
  - regex: 'Android[\- ][\d]+\.[\d]+\.[\d]+; [^;]+; ([A-Za-z0-9 _-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+; [^;]+; ([A-Za-z0-9 _-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+; [^;]+; WOWMobile ([A-Za-z0-9 _-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+\-update1; [^;]+; ([A-Za-z0-9 _-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+\.[\d]+;[^;]+;([A-Za-z0-9 _-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+\.[\d]+; ([A-Za-z0-9 _-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+; ([A-Za-z0-9 _-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+\.[\d]+; [^;]+; ([A-Za-z0-9\.\/_-]+) '
  - regex: 'Android[\- ][\d]+\.[\d]+; [^;]+; ([A-Za-z0-9\.\/_-]+) '

  ##########
  # Generic Smart Phone
  ##########
  - regex: '(hiptop|avantgo|plucker|xiino|blazer|elaine|up.browser|up.link|mmp|smartphone|midp|wap|vodafone|o2|pocket|mobile|pda)'
    device_replacement: "Generic Smartphone"

  ##########
  # Generic Feature Phone
  ##########
  - regex: '^(1207|3gso|4thp|501i|502i|503i|504i|505i|506i|6310|6590|770s|802s|a wa|acer|acs\-|airn|alav|asus|attw|au\-m|aur |aus |abac|acoo|aiko|alco|alca|amoi|anex|anny|anyw|aptu|arch|argo|bell|bird|bw\-n|bw\-u|beck|benq|bilb|blac|c55/|cdm\-|chtm|capi|comp|cond|craw|dall|dbte|dc\-s|dica|ds\-d|ds12|dait|devi|dmob|doco|dopo|el49|erk0|esl8|ez40|ez60|ez70|ezos|ezze|elai|emul|eric|ezwa|fake|fly\-|fly_|g\-mo|g1 u|g560|gf\-5|grun|gene|go.w|good|grad|hcit|hd\-m|hd\-p|hd\-t|hei\-|hp i|hpip|hs\-c|htc |htc\-|htca|htcg)'
    device_replacement: 'Generic Feature Phone'
  - regex: '^(htcp|htcs|htct|htc_|haie|hita|huaw|hutc|i\-20|i\-go|i\-ma|i230|iac|iac\-|iac/|ig01|im1k|inno|iris|jata|java|kddi|kgt|kgt/|kpt |kwc\-|klon|lexi|lg g|lg\-a|lg\-b|lg\-c|lg\-d|lg\-f|lg\-g|lg\-k|lg\-l|lg\-m|lg\-o|lg\-p|lg\-s|lg\-t|lg\-u|lg\-w|lg/k|lg/l|lg/u|lg50|lg54|lge\-|lge/|lynx|leno|m1\-w|m3ga|m50/|maui|mc01|mc21|mcca|medi|meri|mio8|mioa|mo01|mo02|mode|modo|mot |mot\-|mt50|mtp1|mtv |mate|maxo|merc|mits|mobi|motv|mozz|n100|n101|n102|n202|n203|n300|n302|n500|n502|n505|n700|n701|n710|nec\-|nem\-|newg|neon)'
    device_replacement: 'Generic Feature Phone'
  - regex: '^(netf|noki|nzph|o2 x|o2\-x|opwv|owg1|opti|oran|ot\-s|p800|pand|pg\-1|pg\-2|pg\-3|pg\-6|pg\-8|pg\-c|pg13|phil|pn\-2|pt\-g|palm|pana|pire|pock|pose|psio|qa\-a|qc\-2|qc\-3|qc\-5|qc\-7|qc07|qc12|qc21|qc32|qc60|qci\-|qwap|qtek|r380|r600|raks|rim9|rove|s55/|sage|sams|sc01|sch\-|scp\-|sdk/|se47|sec\-|sec0|sec1|semc|sgh\-|shar|sie\-|sk\-0|sl45|slid|smb3|smt5|sp01|sph\-|spv |spv\-|sy01|samm|sany|sava|scoo|send|siem|smar|smit|soft|sony|t\-mo|t218|t250|t600|t610|t618|tcl\-|tdg\-|telm|tim\-|ts70|tsm\-|tsm3|tsm5|tx\-9|tagt)'
    device_replacement: 'Generic Feature Phone'
  - regex: '^(talk|teli|topl|tosh|up.b|upg1|utst|v400|v750|veri|vk\-v|vk40|vk50|vk52|vk53|vm40|vx98|virg|vite|voda|vulc|w3c |w3c\-|wapj|wapp|wapu|wapm|wig |wapi|wapr|wapv|wapy|wapa|waps|wapt|winc|winw|wonu|x700|xda2|xdag|yas\-|your|zte\-|zeto|aste|audi|avan|blaz|brew|brvw|bumb|ccwa|cell|cldc|cmd\-|dang|eml2|fetc|hipt|http|ibro|idea|ikom|ipaq|jbro|jemu|jigs|keji|kyoc|kyok|libw|m\-cr|midp|mmef|moto|mwbp|mywa|newt|nok6|o2im|pant|pdxg|play|pluc|port|prox|rozo|sama|seri|smal|symb|treo|upsi|vx52|vx53|vx60|vx61|vx70|vx80|vx81|vx83|vx85|wap\-|webc|whit|wmlb|xda\-|xda_)'
    device_replacement: 'Generic Feature Phone'

  ##########
  # Spiders (this is hack...)
  ##########
  - regex: '(bingbot|bot|borg|google(^tv)|yahoo|slurp|msnbot|msrbot|openbot|archiver|netresearch|lycos|scooter|altavista|teoma|gigabot|baiduspider|blitzbot|oegp|charlotte|furlbot|http%20client|polybot|htdig|ichiro|mogimogi|larbin|pompos|scrubby|searchsight|seekbot|semanticdiscovery|silk|snappy|speedy|spider|voila|vortex|voyager|zao|zeal|fast\-webcrawler|converacrawler|dataparksearch|findlinks|crawler|Netvibes|Sogou Pic Spider|ICC\-Crawler|Innovazion Crawler|Daumoa|EtaoSpider|A6\-Indexer|YisouSpider|Riddler|DBot|wsr\-agent|Xenu|SeznamBot|PaperLiBot|SputnikBot|CCBot|ProoXiBot|Scrapy|Genieo|Screaming Frog|YahooCacheSystem|CiBra|Nutch)'
    device_replacement: 'Spider'
